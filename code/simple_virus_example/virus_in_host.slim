// -------------------
// WITHIN-HOST MODEL
// -------------------

// INITIALIZE
initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees = T);
	initializeTreeSeq();
	defaults = Dictionary(
		"SEED", getSeed(),
		"INFILE", "",                  // optional file to read in start from
		"N_FOUNDERS", 20,              // average number chosen to start a new infection
		"REPRODUCTION_BENEFIT", 1.0,   // increase in reproduction rate for m2 mutations
		"TRANSMISSION_BENEFIT", 1e5,   // increase in transmission probability for m1 mutations
		"TRANSMISSION_DAYS", integer(0), // a list of which day does transmission happen relative to start
		"SAMPLING_DAY", 60,            // final sampling day relative to start
		"NUM_SAMPLES",  10,            // number of samples
		"OUTPUT_HOST_IDS", integer(0), // a list of IDs of hosts to output infections for
		"HOST_ID", "00",               // this host ID
		"POP_GROWTH_RATE", 1.0,        // rate of growth of population
		"K", 1e5     				       // carrying capacity within host
		);
	
	// Set up parameters with a user-defined function
	setupParams(defaults);
	defineConstant("PARAMS", defaults);

	initializeChromosome(1, 1, "H");
	initializeRecombinationRate(0);
	initializeMutationRate(1e-4);
	initializeMutationType("m1", 0, "f", 0); // improve transmission
	initializeMutationType("m2", 0, "f", 0); // improve reproduction
	c(m1,m2).convertToSubstitution = F;
	// enforce mutually exclusive replacement for derived/ancestral mutations
	c(m1,m2).mutationStackGroup = 1;
	c(m1,m2).mutationStackPolicy = 'l';
	initializeGenomicElementType("g1", c(m1, m2), c(1, 1));
	defineConstant("MUT_POS", 0);
	initializeGenomicElement(g1, MUT_POS, MUT_POS);

	// print start message
	catn("\n\nWITHIN-HOST PARAMETER SUMMARY:\n");
}

// Pathogens infect host
1 late() {
   // start seed simulation or load an input file
	pop_id = asInteger(HOST_ID);
   if (INFILE == "") {
      catn("\nSTARTING SEED SIMULATION FROM " + INFILE + "\n");
      // infections are started with X pathogens, on average, where X = N_founders / (1 − exp(−N_founders))
      sim.addSubpop(pop_id, rztpois(1, N_FOUNDERS));
      PARAMS.setValue("FOUNDERS", Dictionary(HOST_ID, c()));
      PARAMS.setValue("FOUNDING_TIME", Dictionary(HOST_ID, sim.cycle));
   } else {
      catn("\nSTARTING SIMULATION\n");
      // load input file
      sim.readFromPopulationFile(INFILE);
      // load metadata, which stores information about which individuals are needed to seed this infection
      metadata = treeSeqMetadata(INFILE);
      // determine which individuals to keep
      inds_to_keep = metadata.getValue("FOUNDERS").getValue(HOST_ID);
      PARAMS.setValue("FOUNDERS", metadata.getValue("FOUNDERS"));
      PARAMS.setValue("FOUNDING_TIME", metadata.getValue("FOUNDING_TIME"));
      // transfer founders to a new population and kill everyone else
      old_pops = sim.subpopulations;
      sim.addSubpop(pop_id, 0);
      new_pop = sim.subpopulations[sim.subpopulations.id == pop_id];
      founders = sim.individualsWithPedigreeIDs(inds_to_keep);
      if (size(founders) != size(inds_to_keep)) {
         catn("Desired founders: " + paste(inds_to_keep, sep=","));
         catn("Obtained founders: " + paste(new_pop.individuals.pedigreeID, sep=","));
      	stop("Some founding individuals are not present (or alive)!");
      }
		new_pop.takeMigrants(founders);
      sim.killIndividuals(old_pops.individuals);
   }
   // track simulation start day
   defineConstant("SIM_START", sim.cycle);		
   PARAMS.setValue("SIM_START", SIM_START);
   // calculate the overall transmission day
   defineConstant("ABS_TRANSMISSION_DAYS", SIM_START + asInteger(TRANSMISSION_DAYS));
   PARAMS.setValue("ABS_TRANSMISSION_DAYS", ABS_TRANSMISSION_DAYS);
   defineConstant("ABS_SAMPLING_DAY", SIM_START + asInteger(SAMPLING_DAY));
   PARAMS.setValue("ABS_SAMPLING_DAY", ABS_SAMPLING_DAY);
}

// Pathogens are transmitted to next host
ABS_TRANSMISSION_DAYS late() {
	// parse 'output_host_id' to figure out which hosts to transmit to
	which_hosts = which(ABS_TRANSMISSION_DAYS == community.tick);
	hosts_to_infect = OUTPUT_HOST_IDS[which_hosts];
	// determine how many pathogens are needed to infect all hosts
	N_pathogens = rztpois(length(hosts_to_infect), N_FOUNDERS);
	// determine mutational status of all pathogens
	mut_status = sim.subpopulations.individuals.countOfMutationsOfType(m1);
	weights = 1 + (mut_status * TRANSMISSION_BENEFIT); // carrying the mutation confers X% higher probability of being transmitted
	transmitted_inds = sample(sim.subpopulations.individuals, size = sum(N_pathogens), replace = F, weights=weights);
	sim.treeSeqRememberIndividuals(transmitted_inds); // permanently remember these individuals in subsequent parallel infection steps
	// kill everyone else - mark individuals to be transmitted with a unique tag
	sim.subpopulations.individuals.tagL0 = T;
	transmitted_inds.tagL0 = F;
	sim.killIndividuals(sim.subpopulations.subsetIndividuals(tagL0 = T));
	// construct dictionary of infected hosts and viral genomes to be transmitted to each
	founders = PARAMS.getValue("FOUNDERS");
	founding_time = PARAMS.getValue("FOUNDING_TIME");
	for (host in hosts_to_infect, count in N_pathogens, range_end in cumSum(N_pathogens)) {
		sampled_inds = transmitted_inds[(range_end-count):(range_end-1)];
		founders.setValue(host, sampled_inds.pedigreeID);
		founding_time.setValue(host, sim.cycle);
	}
}

ABS_SAMPLING_DAY late() {
	// also remember some non-transmitted individuals
	sim.treeSeqRememberIndividuals(sim.subpopulations.sampleIndividuals(rpois(1, NUM_SAMPLES)));
}

max(c(ABS_TRANSMISSION_DAYS, ABS_SAMPLING_DAY)) late() {
	// write out a tree sequence containing the information needed for all subsequent infections
	sim.killIndividuals(sim.subpopulations.individuals);
	sim.treeSeqOutput("sim_" + HOST_ID + ".trees", metadata=PARAMS);
	sim.simulationFinished();
}

// Pathogens replicate within the host
reproduction() {
	// choose the target population size based on the specified population growth rate
	mut_status = sim.subpopulations.individuals.countOfMutationsOfType(m2);
	num_offspring = rpois(sum(sim.subpopulations.individualCount), POP_GROWTH_RATE * (1 + mut_status * REPRODUCTION_BENEFIT));
	for (i in sim.subpopulations.individuals, n in num_offspring) {
		offspring = sim.subpopulations.addCloned(i, count=n);
	}
	self.active = 0;
}

// Individuals have their fitness scaled according to the overall population size (logistic growth)
2: early() {
	sim.subpopulations.fitnessScaling = pmin(0.9, K / sim.subpopulations.individualCount);
}


function (void)setupParams(object<Dictionary>$ defaults)
{
	for (k in defaults.allKeys) {
		if (!exists(k))
			defineConstant(k, defaults.getValue(k));
		else
			defaults.setValue(k, executeLambda(k + ";"));
	}
	catn("===========================");
	catn("Model constants: " + defaults.serialize("pretty"));
	catn("===========================");
}
